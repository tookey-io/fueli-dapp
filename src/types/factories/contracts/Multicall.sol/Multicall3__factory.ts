/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multicall3,
  Multicall3Interface,
} from "../../../contracts/Multicall.sol/Multicall3";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610abc908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630f28c97d14610117578063174dea7114610112578063252dba421461010d57806327e86d6e146101085780633408e47014610103578063399542e9146100fe5780633e64a696146100f957806342cbb15c146100f45780634d2301cc146100ef57806372425d9d146100ea57806382ad56cb146100e557806386d516e8146100e0578063a8b0574e146100db578063bce38bd7146100d6578063c3077fa9146100d15763ee82ac5e146100cc57600080fd5b61076f565b6106d5565b6106b2565b610697565b61067c565b6105b2565b610597565b61056f565b610543565b610528565b610504565b610495565b610475565b6103b4565b610259565b34610132576000366003190112610132576020604051428152f35b600080fd5b9181601f84011215610132578235916001600160401b038311610132576020808501948460051b01011161013257565b602060031982011261013257600435906001600160401b0382116101325761019191600401610137565b9091565b919082519283825260005b8481106101c1575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016101a0565b908082519081815260208091019281808460051b8301019501936000915b8483106102035750505050505090565b9091929394958480610235600193601f19868203018752828b5180511515835201519060409081858201520190610195565b98019301930191949392906101f3565b9060206102569281815201906101d5565b90565b61026236610167565b600061026d82610900565b91815b8181106102965761029284610286853414610a3d565b60405191829182610245565b0390f35b6102a081856108a6565b516102ac828488610a1b565b60008060406102e081850135809901986102c586610821565b926102d3606088018861082b565b939091518094819361085d565b03925af1916102ed61086b565b90610302602094859384840152829015159052565b5191013517156103155750600101610270565b62461bcd60e51b600052600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260846000fd5b90604082019082526020604081840152835180925260608301928160608460051b8301019501936000915b8483106103865750505050505090565b90919293949584806103a4600193605f198682030187528a51610195565b9801930193019194939290610376565b6103bd36610167565b906103cf6103ca836107cd565b6107a3565b82815291601f196103df826107cd565b0160005b81811061046457505060005b818110610405576040518061029286438361034b565b8061045e60008061041960019587896107fa565b8161043161042683610821565b92602081019061082b565b91906104426040518094819361085d565b03925af161044e61086b565b61045884896108a6565b526108ba565b016103ef565b8060606020809388010152016103e3565b346101325760003660031901126101325760206040516000194301408152f35b34610132576000366003190112610132576020604051468152f35b9060406003198301126101325760043580151581036101325791602435906001600160401b0382116101325761019191600401610137565b61025693926060928252602082015281604082015201906101d5565b610292610519610513366104b0565b91610963565b604051918291434043846104e8565b34610132576000366003190112610132576020604051488152f35b34610132576000366003190112610132576020604051438152f35b6001600160a01b0381160361013257565b3461013257602036600319011261013257602060043561058e8161055e565b31604051908152f35b34610132576000366003190112610132576020604051448152f35b6105bb36610167565b6105c481610900565b9060005b8181106105dd57604051806102928582610245565b6105e781846108a6565b516105f38284876109f9565b6000806105ff83610821565b6106118260406102d38188018861082b565b03925af19161061e61086b565b90610633602094859384840152829015159052565b51910135171561064657506001016105c8565b62461bcd60e51b600052600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260646000fd5b34610132576000366003190112610132576020604051458152f35b34610132576000366003190112610132576020604051418152f35b6102926106c1610513366104b0565b6040519182916020835260208301906101d5565b6106de36610167565b6106e781610900565b9160005b82811061070457604051806102928643804090846104e8565b80610769610714600193876108a6565b516107208387876107fa565b600080823561072e8161055e565b8161073e6020958681019061082b565b9190826040519384928337810182815203925af19061075b61086b565b9083015215158091526108ba565b016106eb565b34610132576020366003190112610132576020604051600435408152f35b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176107c857604052565b61078d565b6001600160401b0381116107c85760051b60200190565b634e487b7160e01b600052603260045260246000fd5b919081101561081c5760051b81013590603e1981360301821215610132570190565b6107e4565b356102568161055e565b903590601e198136030182121561013257018035906001600160401b0382116101325760200191813603831361013257565b908092918237016000815290565b3d156108a1573d906001600160401b0382116107c857610894601f8301601f19166020016107a3565b9182523d6000602084013e565b606090565b805182101561081c5760209160051b010190565b156108c157565b60405162461bcd60e51b8152602060048201526017602482015276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b6044820152606490fd5b9061090d6103ca836107cd565b828152809261091e601f19916107cd565b016000805b8281106109305750505050565b60409081518281018181106001600160401b038211176107c8576020935283815282606081830152828701015201610923565b92919061096f82610900565b9360005b8381106109805750505050565b8061098d600192886108a6565b518361099a8388886107fa565b60008082356109a88161055e565b816109b86020958681019061082b565b9190826040519384928337810182815203925af1906109d561086b565b9084015215158092526109ea575b5001610973565b6109f3906108ba565b386109e3565b919081101561081c5760051b81013590605e1981360301821215610132570190565b919081101561081c5760051b81013590607e1981360301821215610132570190565b15610a4457565b60405162461bcd60e51b815260206004820152601a60248201527909aead8e8d2c6c2d8d8667440ecc2d8eaca40dad2e6dac2e8c6d60331b6044820152606490fdfea2646970667358221220718061f4deb74de7e23b6b1711a89314ce31f99582c39e541849edade94bdc7364736f6c63430008130033";

type Multicall3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall3__factory extends ContractFactory {
  constructor(...args: Multicall3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall3> {
    return super.deploy(overrides || {}) as Promise<Multicall3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall3 {
    return super.attach(address) as Multicall3;
  }
  override connect(signer: Signer): Multicall3__factory {
    return super.connect(signer) as Multicall3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new utils.Interface(_abi) as Multicall3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall3 {
    return new Contract(address, _abi, signerOrProvider) as Multicall3;
  }
}
