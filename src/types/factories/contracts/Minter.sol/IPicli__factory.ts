/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPicli,
  IPicliInterface,
} from "../../../contracts/Minter.sol/IPicli";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "string",
        name: "prompt",
        type: "string",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "image",
        type: "string",
      },
      {
        internalType: "string",
        name: "videoId",
        type: "string",
      },
      {
        internalType: "string",
        name: "videoUrl",
        type: "string",
      },
    ],
    name: "inject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPicli__factory {
  static readonly abi = _abi;
  static createInterface(): IPicliInterface {
    return new utils.Interface(_abi) as IPicliInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IPicli {
    return new Contract(address, _abi, signerOrProvider) as IPicli;
  }
}
